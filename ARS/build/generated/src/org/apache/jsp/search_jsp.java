package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\n");
      out.write("<head>\n");
      out.write("    <style rel=\"stylesheet\" type=\"text/css\">\n");
      out.write("table.calendar {\n");
      out.write("  font-family: Helvetica, Arial, sans-serif;\n");
      out.write("  font-size: 0.8em;\n");
      out.write("  border-collapse: collapse;\n");
      out.write("  background-color: white;\n");
      out.write("  border: solid #999999 1px;\n");
      out.write("  background-color: white;\n");
      out.write("  width: 200px;\n");
      out.write("  text-align: center;\n");
      out.write("  /*prevent user from selecting text in Mozilla & Safari - check calendar constructor for IE code)*/\n");
      out.write("  -moz-user-select: none;\n");
      out.write("    /*-khtml-user-select: none;*/\n");
      out.write("}\n");
      out.write("table.calendar input, table.calendar select {\n");
      out.write("  font-size: 10px;\n");
      out.write("}\n");
      out.write("table.calendar td {\n");
      out.write("  border: 0;\n");
      out.write("  font-size: 10px;\n");
      out.write("  text-align: center;\n");
      out.write("}\n");
      out.write("div.mainheading {\n");
      out.write("  margin: 2px;\n");
      out.write("}\n");
      out.write("table.caldayheading {\n");
      out.write("  border-collapse: collapse;\n");
      out.write("  cursor: pointer;\n");
      out.write("  empty-cells: show;\n");
      out.write("  margin: 0 6px 0 6px;\n");
      out.write("}\n");
      out.write("table.caldayheading td {\n");
      out.write("  border: solid #CCCCCC 1px;\n");
      out.write("  text-align: left;\n");
      out.write("  color: #0054E3;\n");
      out.write("  font-weight: bold;\n");
      out.write("  width: 22px; /*should match calendar cell's width*/\n");
      out.write("}\n");
      out.write("table.caldayheading td.wkhead {\n");
      out.write("  border-right: double #CCCCCC 3px;\n");
      out.write("}\n");
      out.write("table.calcells {\n");
      out.write("  border-collapse: collapse;\n");
      out.write("  cursor: pointer;\n");
      out.write("  margin: 0 6px 0 6px;\n");
      out.write("}\n");
      out.write("table.calcells td {\n");
      out.write("  border: solid #CCCCCC 1px;\n");
      out.write("  vertical-align: top;\n");
      out.write("  text-align: left;\n");
      out.write("  font-weight: bold;\n");
      out.write("  width: 22px;\n");
      out.write("  height: 20px; /*IE doesn't like ems*/\n");
      out.write("}\n");
      out.write("table.calcells td div {\n");
      out.write("  padding: 1px;\n");
      out.write("  margin: 0;\n");
      out.write("}\n");
      out.write("table.calcells td.wkhead {\n");
      out.write("  background-color: white;\n");
      out.write("  text-align: center;\n");
      out.write("  border-right: double #CCCCCC 3px;\n");
      out.write("  color: #0054E3;\n");
      out.write("}\n");
      out.write("table.calcells td.wkday {\n");
      out.write("  background-color: #DDDDDD;\n");
      out.write("}\n");
      out.write("table.calcells td.wkend {\n");
      out.write("  background-color: #DDDDDD;\n");
      out.write("}\n");
      out.write("table.calcells td.curdate {\n");
      out.write("\n");
      out.write("}\n");
      out.write("table.calcells td.cell_selected {\n");
      out.write("  background-color: #99CCFF;\n");
      out.write("  color: black;\n");
      out.write("}\n");
      out.write("table.calcells td.notmnth {\n");
      out.write("  background-color: #FFFFFF;\n");
      out.write("  color: #CCCCCC;\n");
      out.write("}\n");
      out.write("table.calcells td.notallowed {\n");
      out.write("  background-color: white;\n");
      out.write("  color: #EEEEEE;\n");
      out.write("  font-style: italic;\n");
      out.write("}\n");
      out.write("table.calcells td.hover {\n");
      out.write("  background-color: #999999;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".style1 {color: #FF0000}\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    function validate()\n");
      out.write("    {\n");
      out.write("        t1=document.form.t1.value\n");
      out.write("        t2=document.form.t2.value\n");
      out.write("         pass=document.form.pass.value\n");
      out.write("         contact=document.form.contact.value\n");
      out.write("\n");
      out.write("            if(t1==\"\")\n");
      out.write("                   {\n");
      out.write("                    alert(\"login name is mandatory\")\n");
      out.write("                    return false\n");
      out.write("                   }\n");
      out.write("                    if(t2==\"\")\n");
      out.write("                   {\n");
      out.write("                    alert(\"login pass is mandatory\")\n");
      out.write("                    return false\n");
      out.write("                   }\n");
      out.write("                           if(contact==\"\")\n");
      out.write("  {\n");
      out.write("    alert(\"Please Enter Your contact number!\");\n");
      out.write("\n");
      out.write("\treturn false;\n");
      out.write("   }\n");
      out.write("var minLength = 10;\n");
      out.write("if (document.form.contact.value.length < minLength || document.form.contact.value.length > minLength)\n");
      out.write("{\n");
      out.write("  alert('Your contact number must be at least ' + minLength + ' characters long. Try again.');\n");
      out.write("  return false;\n");
      out.write("}\n");
      out.write("\n");
      out.write("                   if(pass==\"\")\n");
      out.write("  {\n");
      out.write("    alert(\"Please Enter Your password1!\");\n");
      out.write("\n");
      out.write("\treturn false;\n");
      out.write("   }\n");
      out.write("var minLength = 6;\n");
      out.write("if (document.form.pass.value.length < minLength)\n");
      out.write("{\n");
      out.write("  alert('Your password must be at least ' + minLength + ' characters long. Try again.');\n");
      out.write("  return false;\n");
      out.write("}\n");
      out.write("if(ra==\"\")\n");
      out.write("  {\n");
      out.write("   alert(\"Please Select Jender!\");\n");
      out.write("\n");
      out.write("\treturn false;\n");
      out.write("  }\n");
      out.write("                    return true\n");
      out.write("\n");
      out.write("    }\n");
      out.write("    </script>\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("/*****************************************************************************\n");
      out.write("Copyright (C) 2006  Nick Baicoianu\n");
      out.write("\n");
      out.write("This program is free software; you can redistribute it and/or\n");
      out.write("modify it under the terms of the GNU General Public License\n");
      out.write("as published by the Free Software Foundation; either version 2\n");
      out.write("of the License, or (at your option) any later version.\n");
      out.write("\n");
      out.write("This program is distributed in the hope that it will be useful,\n");
      out.write("but WITHOUT ANY WARRANTY; without even the implied warranty of\n");
      out.write("MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n");
      out.write("GNU General Public License for more details.\n");
      out.write("\n");
      out.write("You should have received a copy of the GNU General Public License\n");
      out.write("along with this program; if not, write to the Free Software\n");
      out.write("Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n");
      out.write("*****************************************************************************/\n");
      out.write("//constructor for the main Epoch class (ENGLISH VERSION)\n");
      out.write("function Epoch(name,mode,targetelement,multiselect)\n");
      out.write("{\n");
      out.write("  this.state = 0;\n");
      out.write("  this.name = name;\n");
      out.write("  this.curDate = new Date();\n");
      out.write("  this.mode = mode;\n");
      out.write("  this.selectMultiple = (multiselect == true); //'false' is not true or not set at all\n");
      out.write("\n");
      out.write("  //the various calendar variables\n");
      out.write("  //this.selectedDate = this.curDate;\n");
      out.write("  this.selectedDates = new Array();\n");
      out.write("  this.calendar;\n");
      out.write("  this.calHeading;\n");
      out.write("  this.calCells;\n");
      out.write("  this.rows;\n");
      out.write("  this.cols;\n");
      out.write("  this.cells = new Array();\n");
      out.write("\n");
      out.write("  //The controls\n");
      out.write("  this.monthSelect;\n");
      out.write("  this.yearSelect;\n");
      out.write("\n");
      out.write("  //standard initializations\n");
      out.write("  this.mousein = false;\n");
      out.write("  this.calConfig();\n");
      out.write("\n");
      out.write("  this.setDays();\n");
      out.write("  this.displayYear = this.displayYearInitial;\n");
      out.write("  this.displayMonth = this.displayMonthInitial;\n");
      out.write("\n");
      out.write("  this.createCalendar(); //create the calendar DOM element and its children, and their related objects\n");
      out.write("\n");
      out.write("  if(this.mode == 'popup' && targetelement && targetelement.type == 'text') //if the target element has been set to be an input text box\n");
      out.write("  {\n");
      out.write("    this.tgt = targetelement;\n");
      out.write("    this.calendar.style.position = 'absolute';\n");
      out.write("    this.topOffset = this.tgt.offsetHeight; // the vertical distance (in pixels) to display the calendar from the Top of its input element\n");
      out.write("    this.leftOffset = 0;           // the horizontal distance (in pixels) to display the calendar from the Left of its input element\n");
      out.write("    this.calendar.style.top = this.getTop(targetelement) + this.topOffset + 'px';\n");
      out.write("    this.calendar.style.left = this.getLeft(targetelement) + this.leftOffset + 'px';\n");
      out.write("    document.body.appendChild(this.calendar);\n");
      out.write("    this.tgt.calendar = this;\n");
      out.write("    this.tgt.onfocus = function () {this.calendar.show();}; //the calendar will popup when the input element is focused\n");
      out.write("    this.tgt.onblur = function () {if(!this.calendar.mousein){this.calendar.hide();}}; //the calendar will popup when the input element is focused\n");
      out.write("  }\n");
      out.write("  else\n");
      out.write("  {\n");
      out.write("    this.container = targetelement;\n");
      out.write("    this.container.appendChild(this.calendar);\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  this.state = 2; //0: initializing, 1: redrawing, 2: finished!\n");
      out.write("  this.visible ? this.show() : this.hide();\n");
      out.write("}\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.calConfig = function () //PRIVATE: initialize calendar variables\n");
      out.write("{\n");
      out.write("  //this.mode = 'flat'; //can be 'flat' or 'popup'\n");
      out.write("  this.displayYearInitial = this.curDate.getFullYear(); //the initial year to display on load\n");
      out.write("  this.displayMonthInitial = this.curDate.getMonth(); //the initial month to display on load (0-11)\n");
      out.write("  this.rangeYearLower = 1000;\n");
      out.write("  this.rangeYearUpper = 3000;\n");
      out.write("  this.minDate = new Date(1000,0,1);\n");
      out.write("  this.maxDate = new Date(3000,0,1);\n");
      out.write("  this.startDay = 0; // the day the week will 'start' on: 0(Sun) to 6(Sat)\n");
      out.write("  this.showWeeks = true; //whether the week numbers will be shown\n");
      out.write("  this.selCurMonthOnly = false; //allow user to only select dates in the currently displayed month\n");
      out.write("  this.clearSelectedOnChange = true; //whether to clear all selected dates when changing months\n");
      out.write("\n");
      out.write("  //flat mode-only settings:\n");
      out.write("  //this.selectMultiple = true; //whether the user can select multiple dates (flat mode only)\n");
      out.write("\n");
      out.write("  switch(this.mode) //set the variables based on the calendar mode\n");
      out.write("  {\n");
      out.write("    case 'popup': //popup options\n");
      out.write("      this.visible = false;\n");
      out.write("      break;\n");
      out.write("    case 'flat':\n");
      out.write("      this.visible = true;\n");
      out.write("\n");
      out.write("      break;\n");
      out.write("  }\n");
      out.write("  this.setLang();\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.setLang = function()  //all language settings for Epoch are made here.  Check Date.dateFormat() for the Date object's language settings\n");
      out.write("{\n");
      out.write("  this.daylist = new Array('Su','Mo','Tu','We','Th','Fr','Sa','Su','Mo','Tu','We','Th','Fr','Sa'); /*<lang:en>*/\n");
      out.write("  this.months_sh = new Array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');\n");
      out.write("  this.monthup_title = 'Go to the next month';\n");
      out.write("  this.monthdn_title = 'Go to the previous month';\n");
      out.write("  this.clearbtn_caption = 'Clear';\n");
      out.write("  this.clearbtn_title = 'Clears any dates selected on the calendar';\n");
      out.write("  this.maxrange_caption = 'This is the maximum range';\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.getTop = function (element) //PRIVATE: returns the absolute Top value of element, in pixels\n");
      out.write("{\n");
      out.write("    var oNode = element;\n");
      out.write("    var iTop = 0;\n");
      out.write("\n");
      out.write("    while(oNode.tagName != 'BODY') {\n");
      out.write("        iTop += oNode.offsetTop;\n");
      out.write("        oNode = oNode.offsetParent;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    return iTop;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.getLeft = function (element) //PRIVATE: returns the absolute Left value of element, in pixels\n");
      out.write("{\n");
      out.write("    var oNode = element;\n");
      out.write("    var iLeft = 0;\n");
      out.write("\n");
      out.write("    while(oNode.tagName != 'BODY') {\n");
      out.write("        iLeft += oNode.offsetLeft;\n");
      out.write("        oNode = oNode.offsetParent;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    return iLeft;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.show = function () //PUBLIC: displays the calendar\n");
      out.write("{\n");
      out.write("  this.calendar.style.display = 'block';\n");
      out.write("  this.visible = true;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.hide = function () //PUBLIC: Hides the calendar\n");
      out.write("{\n");
      out.write("  this.calendar.style.display = 'none';\n");
      out.write("  this.visible = false;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.toggle = function () //PUBLIC: Toggles (shows/hides) the calendar depending on its current state\n");
      out.write("{\n");
      out.write("  if(this.visible) {\n");
      out.write("    this.hide();\n");
      out.write("  }\n");
      out.write("  else {\n");
      out.write("    this.show();\n");
      out.write("  }\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.setDays = function ()  //PRIVATE: initializes the standard Gregorian Calendar parameters\n");
      out.write("{\n");
      out.write("  this.daynames = new Array();\n");
      out.write("  var j=0;\n");
      out.write("  for(var i=this.startDay; i< this.startDay + 7;i++) {\n");
      out.write("    this.daynames[j++] = this.daylist[i];\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  this.monthDayCount = new Array(31,((this.curDate.getFullYear() - 2000) % 4 ? 28 : 29),31,30,31,30,31,31,30,31,30,31);\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.setClass = function (element,className) //PRIVATE: sets the CSS class of the element, W3C & IE\n");
      out.write("{\n");
      out.write("  element.setAttribute('class',className);\n");
      out.write("  element.setAttribute('className',className); //<iehack>\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.createCalendar = function ()  //PRIVATE: creates the full DOM implementation of the calendar\n");
      out.write("{\n");
      out.write("  var tbody, tr, td;\n");
      out.write("  this.calendar = document.createElement('table');\n");
      out.write("  this.calendar.setAttribute('id',this.name+'_calendar');\n");
      out.write("  this.setClass(this.calendar,'calendar');\n");
      out.write("  //to prevent IE from selecting text when clicking on the calendar\n");
      out.write("  this.calendar.onselectstart = function() {return false;};\n");
      out.write("  this.calendar.ondrag = function() {return false;};\n");
      out.write("  tbody = document.createElement('tbody');\n");
      out.write("\n");
      out.write("  //create the Main Calendar Heading\n");
      out.write("  tr = document.createElement('tr');\n");
      out.write("  td = document.createElement('td');\n");
      out.write("  td.appendChild(this.createMainHeading());\n");
      out.write("  tr.appendChild(td);\n");
      out.write("  tbody.appendChild(tr);\n");
      out.write("\n");
      out.write("  //create the calendar Day Heading\n");
      out.write("  tr = document.createElement('tr');\n");
      out.write("  td = document.createElement('td');\n");
      out.write("  td.appendChild(this.createDayHeading());\n");
      out.write("  tr.appendChild(td);\n");
      out.write("  tbody.appendChild(tr);\n");
      out.write("\n");
      out.write("  //create the calendar Day Cells\n");
      out.write("  tr = document.createElement('tr');\n");
      out.write("  td = document.createElement('td');\n");
      out.write("  td.setAttribute('id',this.name+'_cell_td');\n");
      out.write("  this.calCellContainer = td;  //used as a handle for manipulating the calendar cells as a whole\n");
      out.write("  td.appendChild(this.createCalCells());\n");
      out.write("  tr.appendChild(td);\n");
      out.write("  tbody.appendChild(tr);\n");
      out.write("\n");
      out.write("  //create the calendar footer\n");
      out.write("  tr = document.createElement('tr');\n");
      out.write("  td = document.createElement('td');\n");
      out.write("  td.appendChild(this.createFooter());\n");
      out.write("  tr.appendChild(td);\n");
      out.write("  tbody.appendChild(tr);\n");
      out.write("\n");
      out.write("  //add the tbody element to the main calendar table\n");
      out.write("  this.calendar.appendChild(tbody);\n");
      out.write("\n");
      out.write("  //and add the onmouseover events to the calendar table\n");
      out.write("  this.calendar.owner = this;\n");
      out.write("  this.calendar.onmouseover = function() {this.owner.mousein = true;};\n");
      out.write("  this.calendar.onmouseout = function() {this.owner.mousein = false;};\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.createMainHeading = function () //PRIVATE: Creates the primary calendar heading, with months & years\n");
      out.write("{\n");
      out.write("  //create the containing <div> element\n");
      out.write("  var container = document.createElement('div');\n");
      out.write("  container.setAttribute('id',this.name+'_mainheading');\n");
      out.write("  this.setClass(container,'mainheading');\n");
      out.write("  //create the child elements and other variables\n");
      out.write("  this.monthSelect = document.createElement('select');\n");
      out.write("  this.yearSelect = document.createElement('select');\n");
      out.write("  var monthDn = document.createElement('input'), monthUp = document.createElement('input');\n");
      out.write("  var opt, i;\n");
      out.write("  //fill the month select box\n");
      out.write("  for(i=0;i<12;i++)\n");
      out.write("  {\n");
      out.write("    opt = document.createElement('option');\n");
      out.write("    opt.setAttribute('value',i);\n");
      out.write("    if(this.state == 0 && this.displayMonth == i) {\n");
      out.write("      opt.setAttribute('selected','selected');\n");
      out.write("    }\n");
      out.write("    opt.appendChild(document.createTextNode(this.months_sh[i]));\n");
      out.write("    this.monthSelect.appendChild(opt);\n");
      out.write("  }\n");
      out.write("  //and fill the year select box\n");
      out.write("  for(i=this.rangeYearLower;i<=this.rangeYearUpper;i++)\n");
      out.write("  {\n");
      out.write("    opt = document.createElement('option');\n");
      out.write("    opt.setAttribute('value',i);\n");
      out.write("    if(this.state == 0 && this.displayYear == i) {\n");
      out.write("      opt.setAttribute('selected','selected');\n");
      out.write("    }\n");
      out.write("    opt.appendChild(document.createTextNode(i));\n");
      out.write("    this.yearSelect.appendChild(opt);\n");
      out.write("  }\n");
      out.write("  //add the appropriate children for the month buttons\n");
      out.write("  monthUp.setAttribute('type','button');\n");
      out.write("  monthUp.setAttribute('value','>');\n");
      out.write("  monthUp.setAttribute('title',this.monthup_title);\n");
      out.write("  monthDn.setAttribute('type','button');\n");
      out.write("  monthDn.setAttribute('value','<');\n");
      out.write("  monthDn.setAttribute('title',this.monthdn_title);\n");
      out.write("  this.monthSelect.owner = this.yearSelect.owner = monthUp.owner = monthDn.owner = this;  //hack to allow us to access this calendar in the events (<fix>??)\n");
      out.write("\n");
      out.write("  //assign the event handlers for the controls\n");
      out.write("  monthUp.onmouseup = function () {this.owner.nextMonth();};\n");
      out.write("  monthDn.onmouseup = function () {this.owner.prevMonth();};\n");
      out.write("  this.monthSelect.onchange = function() {\n");
      out.write("    this.owner.displayMonth = this.value;\n");
      out.write("    this.owner.displayYear = this.owner.yearSelect.value;\n");
      out.write("    this.owner.goToMonth(this.owner.displayYear,this.owner.displayMonth);\n");
      out.write("  };\n");
      out.write("  this.yearSelect.onchange = function() {\n");
      out.write("    this.owner.displayMonth = this.owner.monthSelect.value;\n");
      out.write("    this.owner.displayYear = this.value;\n");
      out.write("    this.owner.goToMonth(this.owner.displayYear,this.owner.displayMonth);\n");
      out.write("  };\n");
      out.write("\n");
      out.write("  //and finally add the elements to the containing div\n");
      out.write("  container.appendChild(monthDn);\n");
      out.write("  container.appendChild(this.monthSelect);\n");
      out.write("  container.appendChild(this.yearSelect);\n");
      out.write("  container.appendChild(monthUp);\n");
      out.write("  return container;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.createFooter = function () //PRIVATE: creates the footer of the calendar - goes under the calendar cells\n");
      out.write("{\n");
      out.write("  var container = document.createElement('div');\n");
      out.write("  var clearSelected = document.createElement('input');\n");
      out.write("  clearSelected.setAttribute('type','button');\n");
      out.write("  clearSelected.setAttribute('value',this.clearbtn_caption);\n");
      out.write("  clearSelected.setAttribute('title',this.clearbtn_title);\n");
      out.write("  clearSelected.owner = this;\n");
      out.write("  clearSelected.onclick = function() { this.owner.resetSelections(false);};\n");
      out.write("  container.appendChild(clearSelected);\n");
      out.write("  return container;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.resetSelections = function (returnToDefaultMonth)  //PRIVATE: reset the calendar's selection variables to defaults\n");
      out.write("{\n");
      out.write("  this.selectedDates = new Array();\n");
      out.write("  this.rows = new Array(false,false,false,false,false,false,false);\n");
      out.write("  this.cols = new Array(false,false,false,false,false,false,false);\n");
      out.write("  if(this.tgt)  //if there is a target element, clear it too\n");
      out.write("  {\n");
      out.write("    this.tgt.value = '';\n");
      out.write("    if(this.mode == 'popup') {//hide the calendar if in popup mode\n");
      out.write("      this.hide();\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  if(returnToDefaultMonth == true) {\n");
      out.write("    this.goToMonth(this.displayYearInitial,this.displayMonthInitial);\n");
      out.write("  }\n");
      out.write("  else {\n");
      out.write("    this.reDraw();\n");
      out.write("  }\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.createDayHeading = function ()  //PRIVATE: creates the heading containing the day names\n");
      out.write("{\n");
      out.write("  //create the table element\n");
      out.write("  this.calHeading = document.createElement('table');\n");
      out.write("  this.calHeading.setAttribute('id',this.name+'_caldayheading');\n");
      out.write("  this.setClass(this.calHeading,'caldayheading');\n");
      out.write("  var tbody,tr,td;\n");
      out.write("  tbody = document.createElement('tbody');\n");
      out.write("  tr = document.createElement('tr');\n");
      out.write("  this.cols = new Array(false,false,false,false,false,false,false);\n");
      out.write("\n");
      out.write("  //if we're showing the week headings, create an empty <td> for filler\n");
      out.write("  if(this.showWeeks)\n");
      out.write("  {\n");
      out.write("    td = document.createElement('td');\n");
      out.write("    td.setAttribute('class','wkhead');\n");
      out.write("    td.setAttribute('className','wkhead'); //<iehack>\n");
      out.write("    tr.appendChild(td);\n");
      out.write("  }\n");
      out.write("  //populate the day titles\n");
      out.write("  for(var dow=0;dow<7;dow++)\n");
      out.write("  {\n");
      out.write("    td = document.createElement('td');\n");
      out.write("    td.appendChild(document.createTextNode(this.daynames[dow]));\n");
      out.write("    if(this.selectMultiple) { //if selectMultiple is true, assign the cell a CalHeading Object to handle all events\n");
      out.write("      td.headObj = new CalHeading(this,td,(dow + this.startDay < 7 ? dow + this.startDay : dow + this.startDay - 7));\n");
      out.write("    }\n");
      out.write("    tr.appendChild(td);\n");
      out.write("  }\n");
      out.write("  tbody.appendChild(tr);\n");
      out.write("  this.calHeading.appendChild(tbody);\n");
      out.write("  return this.calHeading;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.createCalCells = function ()  //PRIVATE: creates the table containing the calendar day cells\n");
      out.write("{\n");
      out.write("  this.rows = new Array(false,false,false,false,false,false);\n");
      out.write("  this.cells = new Array();\n");
      out.write("  var row = -1, totalCells = (this.showWeeks ? 48 : 42);\n");
      out.write("  var beginDate = new Date(this.displayYear,this.displayMonth,1);\n");
      out.write("  var endDate = new Date(this.displayYear,this.displayMonth,this.monthDayCount[this.displayMonth]);\n");
      out.write("  var sdt = new Date(beginDate);\n");
      out.write("  sdt.setDate(sdt.getDate() + (this.startDay - beginDate.getDay()) - (this.startDay - beginDate.getDay() > 0 ? 7 : 0) );\n");
      out.write("  //create the table element\n");
      out.write("  this.calCells = document.createElement('table');\n");
      out.write("  this.calCells.setAttribute('id',this.name+'_calcells');\n");
      out.write("  this.setClass(this.calCells,'calcells');\n");
      out.write("  var tbody,tr,td;\n");
      out.write("  tbody = document.createElement('tbody');\n");
      out.write("  for(var i=0;i<totalCells;i++)\n");
      out.write("  {\n");
      out.write("    if(this.showWeeks) //if we are showing the week headings\n");
      out.write("    {\n");
      out.write("      if(i % 8 == 0)\n");
      out.write("      {\n");
      out.write("        row++;\n");
      out.write("        tr = document.createElement('tr');\n");
      out.write("        td = document.createElement('td');\n");
      out.write("        if(this.selectMultiple) { //if selectMultiple is enabled, create the associated weekObj objects\n");
      out.write("          td.weekObj = new WeekHeading(this,td,sdt.getWeek(),row)\n");
      out.write("        }\n");
      out.write("        else //otherwise just set the class of the td for consistent look\n");
      out.write("        {\n");
      out.write("          td.setAttribute('class','wkhead');\n");
      out.write("          td.setAttribute('className','wkhead'); //<iehack>\n");
      out.write("        }\n");
      out.write("        td.appendChild(document.createTextNode(sdt.getWeek()));\n");
      out.write("        tr.appendChild(td);\n");
      out.write("        i++;\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    else if(i % 7 == 0) //otherwise, new row every 7 cells\n");
      out.write("    {\n");
      out.write("      row++;\n");
      out.write("      tr = document.createElement('tr');\n");
      out.write("    }\n");
      out.write("    //create the day cells\n");
      out.write("    td = document.createElement('td');\n");
      out.write("    td.appendChild(document.createTextNode(sdt.getDate()));// +' ' +sdt.getUeDay()));\n");
      out.write("    var cell = new CalCell(this,td,sdt,row);\n");
      out.write("    this.cells.push(cell);\n");
      out.write("    td.cellObj = cell;\n");
      out.write("    sdt.setDate(sdt.getDate() + 1); //increment the date\n");
      out.write("    tr.appendChild(td);\n");
      out.write("    tbody.appendChild(tr);\n");
      out.write("  }\n");
      out.write("  this.calCells.appendChild(tbody);\n");
      out.write("  this.reDraw();\n");
      out.write("  return this.calCells;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.reDraw = function () //PRIVATE: reapplies all the CSS classes for the calendar cells, usually called after chaning their state\n");
      out.write("{\n");
      out.write("  this.state = 1;\n");
      out.write("  var i,j;\n");
      out.write("  for(i=0;i<this.cells.length;i++) {\n");
      out.write("    this.cells[i].selected = false;\n");
      out.write("  }\n");
      out.write("  for(i=0;i<this.cells.length;i++)\n");
      out.write("  {\n");
      out.write("    for(j=0;j<this.selectedDates.length;j++) { //if the cell's date is in the selectedDates array, set its selected property to true\n");
      out.write("      if(this.cells[i].date.getUeDay() == this.selectedDates[j].getUeDay() ) {\n");
      out.write("        this.cells[i].selected = true;\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    this.cells[i].setClass();\n");
      out.write("  }\n");
      out.write("  //alert(this.selectedDates);\n");
      out.write("  this.state = 2;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.deleteCells = function () //PRIVATE: removes the calendar cells from the DOM (does not delete the cell objects associated with them\n");
      out.write("{\n");
      out.write("  this.calCellContainer.removeChild(this.calCellContainer.firstChild); //get a handle on the cell table (optional - for less indirection)\n");
      out.write("  this.cells = new Array(); //reset the cells array\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.goToMonth = function (year,month) //PUBLIC: sets the calendar to display the requested month/year\n");
      out.write("{\n");
      out.write("  this.monthSelect.value = this.displayMonth = month;\n");
      out.write("  this.yearSelect.value = this.displayYear = year;\n");
      out.write("  this.deleteCells();\n");
      out.write("  this.calCellContainer.appendChild(this.createCalCells());\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.nextMonth = function () //PUBLIC: go to the next month.  if the month is december, go to january of the next year\n");
      out.write("{\n");
      out.write("\n");
      out.write("  //increment the month/year values, provided they're within the min/max ranges\n");
      out.write("  if(this.monthSelect.value < 11) {\n");
      out.write("    this.monthSelect.value++;\n");
      out.write("  }\n");
      out.write("  else\n");
      out.write("  {\n");
      out.write("    if(this.yearSelect.value < this.rangeYearUpper)\n");
      out.write("    {\n");
      out.write("      this.monthSelect.value = 0;\n");
      out.write("      this.yearSelect.value++;\n");
      out.write("    }\n");
      out.write("    else {\n");
      out.write("      alert(this.maxrange_caption);\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("  //assign the currently displaying month/year values\n");
      out.write("  this.displayMonth = this.monthSelect.value;\n");
      out.write("  this.displayYear = this.yearSelect.value;\n");
      out.write("\n");
      out.write("  //and refresh the calendar for the new month/year\n");
      out.write("  this.deleteCells();\n");
      out.write("  this.calCellContainer.appendChild(this.createCalCells());\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.prevMonth = function () //PUBLIC: go to the previous month.  if the month is january, go to december of the previous year\n");
      out.write("{\n");
      out.write("  //increment the month/year values, provided they're within the min/max ranges\n");
      out.write("  if(this.monthSelect.value > 0)\n");
      out.write("    this.monthSelect.value--;\n");
      out.write("  else\n");
      out.write("  {\n");
      out.write("    if(this.yearSelect.value > this.rangeYearLower)\n");
      out.write("    {\n");
      out.write("      this.monthSelect.value = 11;\n");
      out.write("      this.yearSelect.value--;\n");
      out.write("    }\n");
      out.write("    else {\n");
      out.write("      alert(this.maxrange_caption);\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  //assign the currently displaying month/year values\n");
      out.write("  this.displayMonth = this.monthSelect.value;\n");
      out.write("  this.displayYear = this.yearSelect.value;\n");
      out.write("\n");
      out.write("  //and refresh the calendar for the new month/year\n");
      out.write("  this.deleteCells();\n");
      out.write("  this.calCellContainer.appendChild(this.createCalCells());\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.addZero = function (vNumber) //PRIVATE: pads a 2 digit number with a leading zero\n");
      out.write("{\n");
      out.write("  return ((vNumber < 10) ? '0' : '') + vNumber;\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.addDates = function (dates,redraw)  //PUBLIC: adds the array \"dates\" to the calendars selectedDates array (no duplicate dates) and redraws the calendar\n");
      out.write("{\n");
      out.write("  var j,in_sd;\n");
      out.write("  for(var i=0;i<dates.length;i++)\n");
      out.write("  {\n");
      out.write("    in_sd = false;\n");
      out.write("    for(j=0;j<this.selectedDates.length;j++)\n");
      out.write("    {\n");
      out.write("      if(dates[i].getUeDay() == this.selectedDates[j].getUeDay())\n");
      out.write("      {\n");
      out.write("        in_sd = true;\n");
      out.write("        break;\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    if(!in_sd) { //if the date isn't already in the array, add it!\n");
      out.write("      this.selectedDates.push(dates[i]);\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("  if(redraw != false) {//redraw  the calendar if \"redraw\" is false or undefined\n");
      out.write("    this.reDraw();\n");
      out.write("  }\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.removeDates = function (dates,redraw)  //PUBLIC: adds the dates to the calendars selectedDates array and redraws the calendar\n");
      out.write("{\n");
      out.write("  var j;\n");
      out.write("  for(var i=0;i<dates.length;i++)\n");
      out.write("  {\n");
      out.write("    for(j=0;j<this.selectedDates.length;j++)\n");
      out.write("    {\n");
      out.write("      if(dates[i].getUeDay() == this.selectedDates[j].getUeDay()) { //search for the dates in the selectedDates array, removing them if the dates match\n");
      out.write("        this.selectedDates.splice(j,1);\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("  if(redraw != false) { //redraw  the calendar if \"redraw\" is false or undefined\n");
      out.write("    this.reDraw();\n");
      out.write("  }\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.outputDate = function (vDate, vFormat) //PUBLIC: outputs a date in the appropriate format (DEPRECATED)\n");
      out.write("{\n");
      out.write("  var vDay      = this.addZero(vDate.getDate());\n");
      out.write("  var vMonth      = this.addZero(vDate.getMonth() + 1);\n");
      out.write("  var vYearLong    = this.addZero(vDate.getFullYear());\n");
      out.write("  var vYearShort    = this.addZero(vDate.getFullYear().toString().substring(3,4));\n");
      out.write("  var vYear      = (vFormat.indexOf('yyyy') > -1 ? vYearLong : vYearShort);\n");
      out.write("  var vHour      = this.addZero(vDate.getHours());\n");
      out.write("  var vMinute      = this.addZero(vDate.getMinutes());\n");
      out.write("  var vSecond      = this.addZero(vDate.getSeconds());\n");
      out.write("  return vFormat.replace(/dd/g, vDay).replace(/mm/g, vMonth).replace(/y{1,4}/g, vYear).replace(/hh/g, vHour).replace(/nn/g, vMinute).replace(/ss/g, vSecond);\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Epoch.prototype.updatePos = function (target) //PUBLIC: moves the calendar's position to target's location (popup mode only)\n");
      out.write("{\n");
      out.write("  this.calendar.style.top = this.getTop(target) + this.topOffset + 'px'\n");
      out.write("  this.calendar.style.left = this.getLeft(target) + this.leftOffset + 'px'\n");
      out.write("}\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("\n");
      out.write("/*****************************************************************************/\n");
      out.write("function CalHeading(owner,tableCell,dow)\n");
      out.write("{\n");
      out.write("  this.owner = owner;\n");
      out.write("  this.tableCell = tableCell;\n");
      out.write("  this.dayOfWeek = dow;\n");
      out.write("\n");
      out.write("  //the event handlers\n");
      out.write("  this.tableCell.onclick = this.onclick;\n");
      out.write("}\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("CalHeading.prototype.onclick = function ()\n");
      out.write("{\n");
      out.write("  //reduce indirection:\n");
      out.write("  var owner = this.headObj.owner;\n");
      out.write("  var sdates = owner.selectedDates;\n");
      out.write("  var cells = owner.cells;\n");
      out.write("\n");
      out.write("  owner.cols[this.headObj.dayOfWeek] = !owner.cols[this.headObj.dayOfWeek];\n");
      out.write("  for(var i=0;i<cells.length;i++) //cycle through all the cells in the calendar, selecting all cells with the same dayOfWeek as this heading\n");
      out.write("  {\n");
      out.write("    if(cells[i].dayOfWeek == this.headObj.dayOfWeek && (!owner.selCurMonthOnly || cells[i].date.getMonth() == owner.displayMonth && cells[i].date.getFullYear() == owner.displayYear)) //if the cell's DoW matches, with other conditions\n");
      out.write("    {\n");
      out.write("      if(owner.cols[this.headObj.dayOfWeek])     //if selecting, add the cell's date to the selectedDates array\n");
      out.write("      {\n");
      out.write("        if(owner.selectedDates.arrayIndex(cells[i].date) == -1) { //if the date isn't already in the array\n");
      out.write("          sdates.push(cells[i].date);\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("      else                    //otherwise, remove it\n");
      out.write("      {\n");
      out.write("        for(var j=0;j<sdates.length;j++)\n");
      out.write("        {\n");
      out.write("          if(cells[i].dayOfWeek == sdates[j].getDay())\n");
      out.write("          {\n");
      out.write("            sdates.splice(j,1);  //remove dates that are within the displaying month/year that have the same day of week as the day cell\n");
      out.write("            break;\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("      cells[i].selected = owner.cols[this.headObj.dayOfWeek];\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("  owner.reDraw();\n");
      out.write("};\n");
      out.write("/*****************************************************************************/\n");
      out.write("function WeekHeading(owner,tableCell,week,row)\n");
      out.write("{\n");
      out.write("  this.owner = owner;\n");
      out.write("  this.tableCell = tableCell;\n");
      out.write("  this.week = week;\n");
      out.write("  this.tableRow = row;\n");
      out.write("  this.tableCell.setAttribute('class','wkhead');\n");
      out.write("  this.tableCell.setAttribute('className','wkhead'); //<iehack>\n");
      out.write("  //the event handlers\n");
      out.write("  this.tableCell.onclick = this.onclick;\n");
      out.write("}\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("WeekHeading.prototype.onclick = function ()\n");
      out.write("{\n");
      out.write("  //reduce indirection:\n");
      out.write("  var owner = this.weekObj.owner;\n");
      out.write("  var cells = owner.cells;\n");
      out.write("  var sdates = owner.selectedDates;\n");
      out.write("  var i,j;\n");
      out.write("  owner.rows[this.weekObj.tableRow] = !owner.rows[this.weekObj.tableRow];\n");
      out.write("  for(i=0;i<cells.length;i++)\n");
      out.write("  {\n");
      out.write("    if(cells[i].tableRow == this.weekObj.tableRow)\n");
      out.write("    {\n");
      out.write("      if(owner.rows[this.weekObj.tableRow] && (!owner.selCurMonthOnly || cells[i].date.getMonth() == owner.displayMonth && cells[i].date.getFullYear() == owner.displayYear)) //match all cells in the current row, with option to restrict to current month only\n");
      out.write("      {\n");
      out.write("        if(owner.selectedDates.arrayIndex(cells[i].date) == -1) {//if the date isn't already in the array\n");
      out.write("          sdates.push(cells[i].date);\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("      else                    //otherwise, remove it\n");
      out.write("      {\n");
      out.write("        for(j=0;j<sdates.length;j++)\n");
      out.write("        {\n");
      out.write("          if(sdates[j].getTime() == cells[i].date.getTime())  //this.weekObj.tableRow && sdates[j].getMonth() == owner.displayMonth && sdates[j].getFullYear() == owner.displayYear)\n");
      out.write("          {\n");
      out.write("            sdates.splice(j,1);  //remove dates that are within the displaying month/year that have the same day of week as the day cell\n");
      out.write("            break;\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("  owner.reDraw();\n");
      out.write("};\n");
      out.write("/*****************************************************************************/\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("function CalCell(owner,tableCell,dateObj,row)\n");
      out.write("{\n");
      out.write("  this.owner = owner;    //used primarily for event handling\n");
      out.write("  this.tableCell = tableCell;       //the link to this cell object's table cell in the DOM\n");
      out.write("  this.cellClass;      //the CSS class of the cell\n");
      out.write("  this.selected = false;  //whether the cell is selected (and is therefore stored in the owner's selectedDates array)\n");
      out.write("  this.date = new Date(dateObj);\n");
      out.write("  this.dayOfWeek = this.date.getDay();\n");
      out.write("  this.week = this.date.getWeek();\n");
      out.write("  this.tableRow = row;\n");
      out.write("\n");
      out.write("  //assign the event handlers for the table cell element\n");
      out.write("  this.tableCell.onclick = this.onclick;\n");
      out.write("  this.tableCell.onmouseover = this.onmouseover;\n");
      out.write("  this.tableCell.onmouseout = this.onmouseout;\n");
      out.write("\n");
      out.write("  //and set the CSS class of the table cell\n");
      out.write("  this.setClass();\n");
      out.write("}\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("CalCell.prototype.onmouseover = function () //replicate CSS :hover effect for non-supporting browsers <iehack>\n");
      out.write("{\n");
      out.write("  this.setAttribute('class',this.cellClass + ' hover');\n");
      out.write("  this.setAttribute('className',this.cellClass + ' hover');\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("CalCell.prototype.onmouseout = function () //replicate CSS :hover effect for non-supporting browsers <iehack>\n");
      out.write("{\n");
      out.write("  this.cellObj.setClass();\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("CalCell.prototype.onclick = function ()\n");
      out.write("{\n");
      out.write("  //reduce indirection:\n");
      out.write("  var cell = this.cellObj;\n");
      out.write("  var owner = cell.owner;\n");
      out.write("  if(!owner.selCurMonthOnly || cell.date.getMonth() == owner.displayMonth && cell.date.getFullYear() == owner.displayYear)\n");
      out.write("  {\n");
      out.write("    if(owner.selectMultiple == true)  //if we can select multiple cells simultaneously, add the currently selected cell's date to the selectedDates array\n");
      out.write("    {\n");
      out.write("      if(!cell.selected) //if this cell has been selected\n");
      out.write("      {\n");
      out.write("        if(owner.selectedDates.arrayIndex(cell.date) == -1) {\n");
      out.write("          owner.selectedDates.push(cell.date);\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("      else\n");
      out.write("      {\n");
      out.write("        var tmp = owner.selectedDates; // to reduce indirection\n");
      out.write("        //if the cell has been deselected, remove it from the owner calendar's selectedDates array\n");
      out.write("        for(var i=0;i<tmp.length;i++)\n");
      out.write("        {\n");
      out.write("          if(tmp[i].getUeDay() == cell.date.getUeDay()) {\n");
      out.write("            tmp.splice(i,1);\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    else //if we can only select one cell at a time\n");
      out.write("    {\n");
      out.write("      owner.selectedDates = new Array(cell.date);\n");
      out.write("      if(owner.tgt) //if there is a target element to place the value in, do so\n");
      out.write("      {\n");
      out.write("        owner.tgt.value = owner.selectedDates[0].dateFormat();\n");
      out.write("        if(owner.mode == 'popup') {\n");
      out.write("          owner.hide();\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    owner.reDraw(); //redraw the calendar cell styles to reflect the changes\n");
      out.write("  }\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("CalCell.prototype.setClass = function ()  //private: sets the CSS class of the cell based on the specified criteria\n");
      out.write("{\n");
      out.write("  if(this.selected) {\n");
      out.write("    this.cellClass = 'cell_selected';\n");
      out.write("  }\n");
      out.write("  else if(this.owner.displayMonth != this.date.getMonth() ) {\n");
      out.write("    this.cellClass = 'notmnth';\n");
      out.write("  }\n");
      out.write("  else if(this.date.getDay() > 0 && this.date.getDay() < 6) {\n");
      out.write("    this.cellClass = 'wkday';\n");
      out.write("  }\n");
      out.write("  else {\n");
      out.write("    this.cellClass = 'wkend';\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  if(this.date.getFullYear() == this.owner.curDate.getFullYear() && this.date.getMonth() == this.owner.curDate.getMonth() && this.date.getDate() == this.owner.curDate.getDate()) {\n");
      out.write("    this.cellClass = this.cellClass + ' curdate';\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  this.tableCell.setAttribute('class',this.cellClass);\n");
      out.write("  this.tableCell.setAttribute('className',this.cellClass); //<iehack>\n");
      out.write("};\n");
      out.write("/*****************************************************************************/\n");
      out.write("Date.prototype.getDayOfYear = function () //returns the day of the year for this date\n");
      out.write("{\n");
      out.write("  return parseInt((this.getTime() - new Date(this.getFullYear(),0,1).getTime())/86400000 + 1);\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Date.prototype.getWeek = function () //returns the day of the year for this date\n");
      out.write("{\n");
      out.write("  return parseInt((this.getTime() - new Date(this.getFullYear(),0,1).getTime())/604800000 + 1);\n");
      out.write("};\n");
      out.write("/*function getISOWeek()\n");
      out.write("{\n");
      out.write("  var newYear = new Date(this.getFullYear(),0,1);\n");
      out.write("  var modDay = newYear.getDay();\n");
      out.write("  if (modDay == 0) modDay=6; else modDay--;\n");
      out.write("\n");
      out.write("  var daynum = ((Date.UTC(this.getFullYear(),this.getMonth(),this.getDate(),0,0,0) - Date.UTC(this.getFullYear()),0,1,0,0,0)) /1000/60/60/24) + 1;\n");
      out.write("\n");
      out.write("  if (modDay < 4 ) {\n");
      out.write("      var weeknum = Math.floor((daynum+modDay-1)/7)+1;\n");
      out.write("  }\n");
      out.write("  else {\n");
      out.write("      var weeknum = Math.floor((daynum+modDay-1)/7);\n");
      out.write("      if (weeknum == 0) {\n");
      out.write("          year--;\n");
      out.write("          var prevNewYear = new Date(this.getFullYear(),0,1);\n");
      out.write("          var prevmodDay = prevNewYear.getDay();\n");
      out.write("          if (prevmodDay == 0) prevmodDay = 6; else prevmodDay--;\n");
      out.write("          if (prevmodDay < 4) weeknum = 53; else weeknum = 52;\n");
      out.write("      }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  return + weeknum;\n");
      out.write("}*/\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Date.prototype.getUeDay = function () //returns the number of DAYS since the UNIX Epoch - good for comparing the date portion\n");
      out.write("{\n");
      out.write("  return parseInt(Math.floor((this.getTime() - this.getTimezoneOffset() * 60000)/86400000)); //must take into account the local timezone\n");
      out.write("};\n");
      out.write("//-----------------------------------------------------------------------------\n");
      out.write("Date.prototype.dateFormat = function(format)\n");
      out.write("{\n");
      out.write("  if(!format) { // the default date format to use - can be customized to the current locale\n");
      out.write("    format = 'm/d/Y';\n");
      out.write("  }\n");
      out.write("  LZ = function(x) {return(x < 0 || x > 9 ? '' : '0') + x};\n");
      out.write("  var MONTH_NAMES = new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');\n");
      out.write("  var DAY_NAMES = new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');\n");
      out.write("  format = format + \"\";\n");
      out.write("  var result=\"\";\n");
      out.write("  var i_format=0;\n");
      out.write("  var c=\"\";\n");
      out.write("  var token=\"\";\n");
      out.write("  var y=this.getFullYear().toString();\n");
      out.write("  var M=this.getMonth()+1;\n");
      out.write("  var d=this.getDate();\n");
      out.write("  var E=this.getDay();\n");
      out.write("  var H=this.getHours();\n");
      out.write("  var m=this.getMinutes();\n");
      out.write("  var s=this.getSeconds();\n");
      out.write("  var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;\n");
      out.write("  // Convert real this parts into formatted versions\n");
      out.write("  var value = new Object();\n");
      out.write("  //if (y.length < 4) {y=''+(y-0+1900);}\n");
      out.write("  value['Y'] = y.toString();\n");
      out.write("  value['y'] = y.substring(2);\n");
      out.write("  value['n'] = M;\n");
      out.write("  value['m'] = LZ(M);\n");
      out.write("  value['F'] = MONTH_NAMES[M-1];\n");
      out.write("  value['M'] = MONTH_NAMES[M+11];\n");
      out.write("  value['j'] = d;\n");
      out.write("  value['d'] = LZ(d);\n");
      out.write("  value['D'] = DAY_NAMES[E+7];\n");
      out.write("  value['l'] = DAY_NAMES[E];\n");
      out.write("  value['G'] = H;\n");
      out.write("  value['H'] = LZ(H);\n");
      out.write("  if (H==0) {value['g']=12;}\n");
      out.write("  else if (H>12){value['g']=H-12;}\n");
      out.write("  else {value['g']=H;}\n");
      out.write("  value['h']=LZ(value['g']);\n");
      out.write("  if (H > 11) {value['a']='pm'; value['A'] = 'PM';}\n");
      out.write("  else { value['a']='am'; value['A'] = 'AM';}\n");
      out.write("  value['i']=LZ(m);\n");
      out.write("  value['s']=LZ(s);\n");
      out.write("  //construct the result string\n");
      out.write("  while (i_format < format.length) {\n");
      out.write("    c=format.charAt(i_format);\n");
      out.write("    token=\"\";\n");
      out.write("    while ((format.charAt(i_format)==c) && (i_format < format.length)) {\n");
      out.write("      token += format.charAt(i_format++);\n");
      out.write("      }\n");
      out.write("    if (value[token] != null) { result=result + value[token]; }\n");
      out.write("    else { result=result + token; }\n");
      out.write("    }\n");
      out.write("  return result;\n");
      out.write("};\n");
      out.write("/*****************************************************************************/\n");
      out.write("Array.prototype.arrayIndex = function(searchVal,startIndex) //similar to array.indexOf() - created to fix IE deficiencies\n");
      out.write("{\n");
      out.write("  startIndex = (startIndex != null ? startIndex : 0); //default startIndex to 0, if not set\n");
      out.write("  for(var i=startIndex;i<this.length;i++)\n");
      out.write("  {\n");
      out.write("    if(searchVal == this[i]) {\n");
      out.write("      return i;\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("  return -1;\n");
      out.write("};\n");
      out.write("/*****************************************************************************/\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("/*You can also place this code in a separate file and link to it like epoch_classes.js*/\n");
      out.write("  var bas_cal,dp_cal,ms_cal;\n");
      out.write("window.onload = function () {\n");
      out.write("  dp_cal  = new Epoch('epoch_popup','popup',document.getElementById('arti'));\n");
      out.write("};\n");
      out.write("</script>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n");
      out.write("<title>Untitled Document</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("<!--\n");
      out.write(".style1 {\n");
      out.write("\tfont-size: 36px;\n");
      out.write("\tcolor: #FF0000;\n");
      out.write("}\n");
      out.write("body {\n");
      out.write("\tbackground-image: url(images/1.jpg);\n");
      out.write("\tbackground-color: #FFFFCC;\n");
      out.write("}\n");
      out.write("-->\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n");
      out.write("  <!--DWLayoutTable-->\n");
      out.write("  <tr>\n");
      out.write("    <td width=\"440\" height=\"67\">&nbsp;</td>\n");
      out.write("    <td width=\"14\">&nbsp;</td>\n");
      out.write("    <td width=\"302\">&nbsp;</td>\n");
      out.write("    <td width=\"29\">&nbsp;</td>\n");
      out.write("    <td width=\"515\">&nbsp;</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr>\n");
      out.write("    <td height=\"75\">&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td valign=\"top\" bgcolor=\"#99FFFF\"><div align=\"center\" class=\"style1\">Search Flights </div></td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr>\n");
      out.write("    <td height=\"35\">&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("  </tr>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  <tr>\n");
      out.write("    <td height=\"450\">&nbsp;</td>\n");
      out.write("    <td colspan=\"3\" valign=\"top\"><table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#FF3366\">\n");
      out.write("      <!--DWLayoutTable-->\n");
      out.write("      <tr>\n");
      out.write("        <td width=\"31\" height=\"13\"></td>\n");
      out.write("          <td width=\"107\"></td>\n");
      out.write("          <td width=\"147\"></td>\n");
      out.write("          <td width=\"60\"></td>\n");
      out.write("          <td width=\"24\"></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"27\"></td>\n");
      out.write("          <td valign=\"top\"><div align=\"center\">From</div></td>\n");
      out.write("          <td valign=\"top\"><label>\n");
      out.write("            <select name=\"select2\">\n");
      out.write("                        <option value=\"-1\">Select Source </option>\n");
      out.write("                     \n");
      out.write("                    ");

try
{
    Class.forName("com.mysql.jdbc.Driver");
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/ARS","root","ujjawal");
PreparedStatement pst=con.prepareStatement("select * from flightinfo");
ResultSet rs=pst.executeQuery();

while(rs.next())
      {
    
      out.write("\n");
      out.write("    \n");
      out.write("    <option value=\"");
      out.print(rs.getString(3));
      out.write('"');
      out.write('>');
      out.print(rs.getString(3));
      out.write("</option>\n");
      out.write("    ");

}
}
catch(Exception e)
{
out.println(e);
}                                 

      out.write("\n");
      out.write("            </select>\n");
      out.write("          </label></td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"13\"></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"24\"></td>\n");
      out.write("          <td valign=\"top\"><div align=\"center\">To</div></td>\n");
      out.write("          <td valign=\"top\"><label>\n");
      out.write("            <select name=\"select3\">\n");
      out.write("                                      <option value=\"-1\">Select Destination </option>\n");
      out.write("                    ");

try
{
    Class.forName("com.mysql.jdbc.Driver");
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/ARS","root","ujjawal");
PreparedStatement pst=con.prepareStatement("select * from flightinfo");
ResultSet rs=pst.executeQuery();

while(rs.next())
      {
    
      out.write("\n");
      out.write("    \n");
      out.write("    <option value=\"");
      out.print(rs.getString(4));
      out.write('"');
      out.write('>');
      out.print(rs.getString(4));
      out.write("</option>\n");
      out.write("    ");

}
}
catch(Exception e)
{
out.println(e);
}                                 

      out.write("\n");
      out.write("            </select>\n");
      out.write("          </label></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"14\"></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"26\"></td>\n");
      out.write("          <td valign=\"top\"><div align=\"center\">Date</div></td>\n");
      out.write("          <td valign=\"top\"><label>\n");
      out.write("                  <input type=\"text\" name=\"textfield3\" id=\"arti\" />\n");
      out.write("          </label></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"14\"></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"63\"></td>\n");
      out.write("          <td valign=\"top\"><div align=\"center\">Class</div></td>\n");
      out.write("          <td colspan=\"2\" valign=\"top\"><p>\n");
      out.write("            <label>\n");
      out.write("              <input type=\"radio\" name=\"RadioGroup1\" value=\"radio\" />\n");
      out.write("              First Class</label>\n");
      out.write("            <br />\n");
      out.write("            <label>\n");
      out.write("              <input type=\"radio\" name=\"RadioGroup1\" value=\"radio\" />\n");
      out.write("              Economy</label>\n");
      out.write("            <br />\n");
      out.write("          </p>          <label></label></td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"20\"></td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"26\"></td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("          <td valign=\"top\"><label>\n");
      out.write("            <input type=\"submit\" name=\"Submit\" value=\"Search\" />\n");
      out.write("          </label></td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("      <tr>\n");
      out.write("        <td height=\"85\"></td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("          <td>&nbsp;</td>\n");
      out.write("          <td></td>\n");
      out.write("          <td></td>\n");
      out.write("        </tr>\n");
      out.write("    </table></td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr>\n");
      out.write("    <td height=\"185\">&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("    <td>&nbsp;</td>\n");
      out.write("  </tr>\n");
      out.write("</table>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
